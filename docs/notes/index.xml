<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on jsstrn &gt; notes</title>
    <link>https://notes.jsstrn.me/notes/</link>
    <description>jsstrn &gt; notes (Notes)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    <atom:link href="https://notes.jsstrn.me/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Add aliases to Git commands</title>
      <link>https://notes.jsstrn.me/notes/git-alias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/git-alias/</guid>
      <description>&lt;p&gt;To create an alias for &lt;code&gt;git checkout&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git config --global alias.co checkout
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can run &lt;code&gt;git co&lt;/code&gt; instead of &lt;code&gt;git checout&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git co
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some common aliases to consider adding&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git config --global alias.co checkout
git config --global alias.st &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status --short&amp;#34;&lt;/span&gt;
git config --global alias.lg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log --oneline --graph&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Check the status of a Git repository</title>
      <link>https://notes.jsstrn.me/notes/git-status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/git-status/</guid>
      <description>&lt;p&gt;To check the status of the Git repository.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see a &lt;code&gt;--short&lt;/code&gt; or &lt;code&gt;-s&lt;/code&gt; version with this command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git status --short
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For convenience, you can add &lt;code&gt;git st&lt;/code&gt; as an alias.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git config --global alias.st &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status --short&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Don&#39;t use VPN services</title>
      <link>https://notes.jsstrn.me/notes/do-not-usevpn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/do-not-usevpn/</guid>
      <description>&lt;p&gt;I came across this &lt;a href=&#34;https://gist.github.com/joepie91/5a9909939e6ce7d09e29&#34;&gt;article&lt;/a&gt; arguing why we should not use a VPN service. The idea that VPN services could be malicious or a honeypot has concerned me. They suggest setting up your own VPN instead with &lt;a href=&#34;https://github.com/StreisandEffect/streisand&#34;&gt;Streisand&lt;/a&gt; or &lt;a href=&#34;https://www.wireguard.com/&#34;&gt;WireGuard&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exit a Bash script on error</title>
      <link>https://notes.jsstrn.me/notes/exit-bash-on-error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/exit-bash-on-error/</guid>
      <description>&lt;p&gt;If we want a Bash script to stop executing the rest of the script when one of the commands fail, we can simply add &lt;code&gt;set -e&lt;/code&gt; to the top of our script.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;set -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Install Ruby on macOS</title>
      <link>https://notes.jsstrn.me/notes/install-ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/install-ruby/</guid>
      <description>&lt;p&gt;macOS comes with its own version of Ruby which will not allow you to install Gems. To start developing in Ruby, we first have to install our own version of Ruby.&lt;/p&gt;
&lt;p&gt;It is generally recommended to use a version manager for Ruby, like &lt;code&gt;rbenv&lt;/code&gt; to manage different versions of Ruby in various projects.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install rbenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add this line to your &lt;code&gt;.zshrc&lt;/code&gt;. This will setup &lt;code&gt;rbenv&lt;/code&gt; including adding &lt;code&gt;rbenv&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;rbenv init -&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See list of stable Ruby versions to install&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rbenv install -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install the version of Ruby that you want&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rbenv install &amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;State which version of Ruby you want to use as the global version&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rbenv global &amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Is it null or undefined?</title>
      <link>https://notes.jsstrn.me/notes/check-variable-null-undefined/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/check-variable-null-undefined/</guid>
      <description>&lt;p&gt;We can use strict equality to check if a variable is null or undefined in JavaScript.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// value is either null or undefined
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What I also found interesting is that although the regular equality in JavaScript is generally frowned upon, these two conditions are exactly identical. Of course, in general I would still prefer to use the code above as it is explicit in its intent.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// value is either null or undefined
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, have a look at the &lt;a href=&#34;https://dorey.github.io/JavaScript-Equality-Table/&#34;&gt;equality table&lt;/a&gt; in JavaScript.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript equality table</title>
      <link>https://notes.jsstrn.me/notes/javascript-equality-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/javascript-equality-table/</guid>
      <description>&lt;p&gt;Use strict equality always and here&amp;rsquo;s a good illustration why – JavaScript&amp;rsquo;s &lt;a href=&#34;https://dorey.github.io/JavaScript-Equality-Table/&#34;&gt;equality table&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Revert changes in Git</title>
      <link>https://notes.jsstrn.me/notes/git-reset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/git-reset/</guid>
      <description>&lt;p&gt;Move commits in C to staged&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;A - B - C &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
git reset --soft B
A - B &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
C is in staged
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Moved commits in C to unstaged&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;A - B - C &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
git reset B // same as doing git reset --mixed
A - B &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
C is in unstaged
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remove commits in C along with any other unstaged changes. Exercise caution when doing this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;A - B - C &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
git reset --hard B
A - B &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
C has been discarded
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Run tests that match a describe block</title>
      <link>https://notes.jsstrn.me/notes/jest-match-name-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/jest-match-name-tests/</guid>
      <description>&lt;p&gt;Very often I come across a situation where I&amp;rsquo;d like to only run a certain subset of tests in a describe block, usually when I&amp;rsquo;m trying to debug some code.&lt;/p&gt;
&lt;p&gt;If the describe block you want to run contains the word &amp;ldquo;Fizz Buzz&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;describe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Fizz Buzz&amp;#39;&lt;/span&gt;, () =&amp;gt; {})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can run all describe blocks that match a regex pattern&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jest --testNamePattern &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Fizz Buzz&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or simply use the alias &lt;code&gt;-t&lt;/code&gt; instead&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jest -t &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Fizz Buzz&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jestjs.io/docs/en/cli.html#&#34;&gt;Jest CLI documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The whole shebang</title>
      <link>https://notes.jsstrn.me/notes/shebang-origin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/shebang-origin/</guid>
      <description>&lt;p&gt;This two character sequence &lt;code&gt;#!&lt;/code&gt; is called shebang. It is used in shell scripts to determine which interpreter should be used to run the script.&lt;/p&gt;
&lt;p&gt;According to &lt;a href=&#34;https://en.wikipedia.org/wiki/Shebang_%28Unix%29#Etymology&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The name shebang for the distinctive two characters may have come from an inexact contraction of SHArp bang or haSH bang, referring to the two typical Unix names for them. Another theory on the sh in shebang is that it is from the default shell sh, usually invoked with shebang.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I personally like to remember &lt;code&gt;#!&lt;/code&gt; as hash bang.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Useful Vim commands</title>
      <link>https://notes.jsstrn.me/notes/vim-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/vim-commands/</guid>
      <description>&lt;h2 id=&#34;settings&#34;&gt;Settings&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:set number&lt;/code&gt; – show line numbers&lt;/p&gt;
&lt;h2 id=&#34;modes&#34;&gt;Modes&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Esc&lt;/code&gt; – command mode (default mode)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i&lt;/code&gt; – insert mode (before cursor)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a&lt;/code&gt; – insert mode (after cursor)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v&lt;/code&gt; – visual mode to select text to &lt;code&gt;y&lt;/code&gt; (yank) or &lt;code&gt;d&lt;/code&gt; (delete) text&lt;/p&gt;
&lt;h2 id=&#34;quiting-vim&#34;&gt;Quiting Vim&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:q&lt;/code&gt; – quit&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:q!&lt;/code&gt; – quit without saving&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:wq&lt;/code&gt; – save and quit&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:ZZ&lt;/code&gt; – save and quit&lt;/p&gt;
&lt;h2 id=&#34;undo-and-redo&#34;&gt;Undo and redo&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;u&lt;/code&gt; – undo the previous command&lt;/p&gt;
&lt;p&gt;&lt;code&gt;U&lt;/code&gt; – undo the whole line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ctrl + R&lt;/code&gt; – redo the previous command&lt;/p&gt;
&lt;h2 id=&#34;copy-and-paste&#34;&gt;Copy and paste&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;yw&lt;/code&gt; – yank (copy) a word&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yy&lt;/code&gt; – yank (copy) the entire line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;y$&lt;/code&gt; – yank from cursor position to end of line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yG&lt;/code&gt; – yank from cursor position to end of file&lt;/p&gt;
&lt;p&gt;&lt;code&gt;p&lt;/code&gt; – to put or paste the text that was copied or deleted&lt;/p&gt;
&lt;h2 id=&#34;delete&#34;&gt;Delete&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; – delete a character&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dw&lt;/code&gt; – delete word&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dd&lt;/code&gt; – delete line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;d$&lt;/code&gt; – delete from cursor to end of line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cw&lt;/code&gt; – change word; this will delete the word and put you in &lt;code&gt;insert&lt;/code&gt; mode&lt;/p&gt;
&lt;h2 id=&#34;navigation&#34;&gt;Navigation&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;h&lt;/code&gt; – move left&lt;/p&gt;
&lt;p&gt;&lt;code&gt;l&lt;/code&gt; – move right&lt;/p&gt;
&lt;p&gt;&lt;code&gt;j&lt;/code&gt; – move down&lt;/p&gt;
&lt;p&gt;&lt;code&gt;k&lt;/code&gt; – move down&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0&lt;/code&gt; – move to start of line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$&lt;/code&gt; – move to end of line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nG&lt;/code&gt; – move to line number where &lt;code&gt;n&lt;/code&gt; is the line number (e.g. &lt;code&gt;54G&lt;/code&gt; goes to line 54)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[[&lt;/code&gt; – move to start of file&lt;/p&gt;
&lt;p&gt;&lt;code&gt;]]&lt;/code&gt; – move to end of file&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>View changes before committing</title>
      <link>https://notes.jsstrn.me/notes/git-commit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/git-commit/</guid>
      <description>&lt;p&gt;Avoid blindly staging code with &lt;code&gt;git add --all&lt;/code&gt; or &lt;code&gt;git add .&lt;/code&gt; as you may accidentally stage and commit code that you didn&amp;rsquo;t intend to.&lt;/p&gt;
&lt;p&gt;I prefer to use &lt;code&gt;--patch&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt; when adding code to staging. This allows you to go through your changes and review them by hunks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add -p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since new files are not tracked they will not show up in &lt;code&gt;--patch&lt;/code&gt; so you have to use &lt;code&gt;--intent-to-add&lt;/code&gt; or &lt;code&gt;-N&lt;/code&gt; to track those files before you can use &lt;code&gt;--patch&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add -N &amp;lt;new-filename&amp;gt;
git add -p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will see changes marked with &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; to indicate if code has been added or deleted. You&amp;rsquo;ll be prompted as such.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1/1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Stage this hunk &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;y,n,q,a,d,e,?&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Typically, you reply with &lt;code&gt;y&lt;/code&gt; to stage the hunk or &lt;code&gt;n&lt;/code&gt; to ignore it. Sometimes we want to stage the entire file without looking at the remaining hunks in the file, we can do this with &lt;code&gt;a&lt;/code&gt;. This is useful for files like &lt;code&gt;package-lock.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can manually edit &lt;code&gt;e&lt;/code&gt; which lines to add or remove in each hunk. When in edit mode you will make your changes in &lt;code&gt;vim&lt;/code&gt;. To remove &lt;code&gt;&#39;+&#39;&lt;/code&gt; lines just delete them. To remove &lt;code&gt;&#39;-&#39;&lt;/code&gt; lines, just change them to &lt;code&gt;&#39; &#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;?&lt;/code&gt; to display this help screen if you ever forget what the commands stand for.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;y - stage this hunk
n - &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not stage this hunk
q - quit; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not stage this hunk or any of the remaining ones
a - stage this hunk and all later hunks in the file
d - &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not stage this hunk or any of the later hunks in the file
e - manually edit the current hunk
? - print help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you have reviewed all your changes. You can commit your changes as usual.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Some meaningful commit message&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>View code changes</title>
      <link>https://notes.jsstrn.me/notes/git-diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/git-diff/</guid>
      <description>&lt;p&gt;One way to review code changes that are unstaged is to use the following command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git diff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that untracked files will not be shown. You have to add untracked files before they will show up.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add -N &amp;lt;untracked-file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also see a summary of what has changed with &lt;code&gt;--stat&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git diff --stat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command is useful to check for trailing white space and merge conflict markers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git diff --check
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can use this command if you&amp;rsquo;ve already staged your changes. This is useful before you make a commit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git diff --staged
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Watch for file changes as you run your tests</title>
      <link>https://notes.jsstrn.me/notes/run-jest-tests-watch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/run-jest-tests-watch/</guid>
      <description>&lt;p&gt;To watch for file changes and &lt;strong&gt;only&lt;/strong&gt; run tests related to changed files. This requires that your project is a Git repository.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jest --watch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To watch for file changes and run &lt;strong&gt;all&lt;/strong&gt; tests. This does not require that your project be a Git repository.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jest --watchAll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We often add this to our npm scripts&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jest&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;test:watch&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jest --watch&amp;#34;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jestjs.io/docs/en/cli.html#&#34;&gt;Jest CLI documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Which shebang to use to run Bash scripts?</title>
      <link>https://notes.jsstrn.me/notes/bash-shebang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/bash-shebang/</guid>
      <description>&lt;p&gt;This two character sequence &lt;code&gt;#!&lt;/code&gt; is called shebang. It is used in shell scripts to determine which interpreter should be used to run the script.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a good idea to include a shebang &lt;code&gt;#!&lt;/code&gt; at the top of a Bash file. This is so that the sript runs correctly regardless of what shell the user is running. For example, if a user is using the zsh shell, the script would default to zsh syntax instead of the intended bash syntax. Adding a shebang prevents this issue.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Reference: &lt;a href=&#34;https://stackoverflow.com/questions/10376206/what-is-the-preferred-bash-shebang&#34;&gt;What is the preferred bash shebang&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>