<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>notes &gt; jsstrn.me</title>
    <link>https://notes.jsstrn.me/</link>
    <description>notes &gt; jsstrn.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    <atom:link href="https://notes.jsstrn.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://notes.jsstrn.me/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/about/</guid>
      <description>&lt;p&gt;This is not a blog.&lt;/p&gt;
&lt;p&gt;These notes are written for myself as a reference and mostly center around software development, but may occasionally include other topics. They are deliberately concise. Think of it as a brain archive similar to Josh Branchaud&amp;rsquo;s &lt;a href=&#34;https://github.com/jbranchaud/til&#34;&gt;Today I Learned&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These notes are organized by &lt;a href=&#34;https://notes.jsstrn.me/tags/&#34;&gt;tags&lt;/a&gt; and &lt;a href=&#34;https://notes.jsstrn.me/categories/&#34;&gt;categories&lt;/a&gt;, and can be viewed in its entirety in &lt;a href=&#34;https://notes.jsstrn.me/notes/&#34;&gt;one page&lt;/a&gt;. They are written in Markdown, built into a static site with &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, and hosted on &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To learn more about the author, visit &lt;a href=&#34;https://jsstrn.me/&#34;&gt;jsstrn.me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add a favicon to a Hugo site</title>
      <link>https://notes.jsstrn.me/notes/hugo-favicon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/hugo-favicon/</guid>
      <description>&lt;p&gt;First, you&amp;rsquo;ll need to &lt;a href=&#34;https://favicon.io/&#34;&gt;create a favicon&lt;/a&gt; for your site, then drop the &lt;code&gt;favicon.ico&lt;/code&gt; file into the &lt;code&gt;static&lt;/code&gt; folder of your Hugo site. Build the project with the &lt;code&gt;hugo&lt;/code&gt; command and publish.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add aliases to Git commands</title>
      <link>https://notes.jsstrn.me/notes/git-alias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/git-alias/</guid>
      <description>&lt;p&gt;To create an alias for &lt;code&gt;git checkout&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git config --global alias.co checkout
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of &lt;code&gt;git checkout&lt;/code&gt;, you can now run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git co
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some common aliases to consider adding&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git config --global alias.co checkout
git config --global alias.st &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status --short&amp;#34;&lt;/span&gt;
git config --global alias.lg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log --oneline --graph&amp;#34;&lt;/span&gt;
git config --global alias.uncommit &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reset --soft HEAD~1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To see the list of aliases in your Git configuration&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git config --list | grep alias
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to add this as an alias you will need to add &lt;code&gt;!&lt;/code&gt; to qualify it as a full Bash command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git config --global alias.alias &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!git config --list | grep alias&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Assign a .local domain to a Raspberry Pi</title>
      <link>https://notes.jsstrn.me/notes/raspi-local-domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/raspi-local-domain/</guid>
      <description>&lt;p&gt;First, install &lt;a href=&#34;https://www.avahi.org/&#34;&gt;Avahi&lt;/a&gt; on your Raspberry Pi&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt-get install avahi-daemon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can access your Raspberry Pi via its hostname &lt;code&gt;raspberrypi.local&lt;/code&gt; instead of its IP address. You can also change the hostname (see reference).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh pi@raspberrypi.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.howtogeek.com/167190/how-and-why-to-assign-the-.local-domain-to-your-raspberry-pi/&#34;&gt;How (and Why) to Assign the .local Domain to Your Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.howtogeek.com/167195/how-to-change-your-raspberry-pi-or-other-linux-devices-hostname/&#34;&gt;How to Change Your Raspberry Pi (or Other Linux Device’s) Hostname&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Buying a Raspberry Pi</title>
      <link>https://notes.jsstrn.me/notes/raspi-purchase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/raspi-purchase/</guid>
      <description>&lt;p&gt;There are many different models of &lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; depending on your needs.&lt;/p&gt;
&lt;p&gt;Once you have decided which model you want, the easiest option is to purchase a &lt;a href=&#34;https://www.canakit.com/&#34;&gt;CanaKit&lt;/a&gt; Raspberry Pi starter kit. It comes with all the essential accessories you will need to get started including a case with a fan, some heat sinks, and a power supply. Try searching on Amazon for the best deals for Raspberry Pi kits.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Check the status of a Git repository</title>
      <link>https://notes.jsstrn.me/notes/git-status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/git-status/</guid>
      <description>&lt;p&gt;To check the status of the Git repository.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see a &lt;code&gt;--short&lt;/code&gt; or &lt;code&gt;-s&lt;/code&gt; version with this command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git status --short
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For convenience, you can add &lt;code&gt;git st&lt;/code&gt; as an alias.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git config --global alias.st &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status --short&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Create an array from range of numbers</title>
      <link>https://notes.jsstrn.me/notes/js-array-range/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/js-array-range/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s say we want to create a list of numbers from [0..9]. How would we do this in JavaScript&lt;/p&gt;
&lt;p&gt;A simple approach would be to use a &lt;code&gt;for&lt;/code&gt; loop&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another approach is to use the &lt;code&gt;Array.prototype.keys()&lt;/code&gt; method which returns the index of each element&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [...Array(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;keys&lt;/span&gt;()]
&lt;span style=&#34;color:#75715e&#34;&gt;// [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Perhaps the most elegant solution is to use &lt;code&gt;Array.from()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Array.&lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}, (&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;// [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Array.from()&lt;/code&gt; takes an array-like object as its first argument and a map function that will be applied to each element. In this case, we pass an object with a &lt;code&gt;length&lt;/code&gt; property and then we take just return the index from the map function.&lt;/p&gt;
&lt;p&gt;If we wanted to start our list at 1 instead, then we can do this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;Array.&lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}, (&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) 
&lt;span style=&#34;color:#75715e&#34;&gt;// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or, more generally, if we wanted include 10 numbers starting from a certain numbers&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;startingNumber&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;

Array.&lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}, (&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;startingNumber&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;// [ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-a-range-within-the-supp#10050831&#34;&gt;Question in Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://2ality.com/2014/05/es6-array-methods.html#array.from(arraylike%2C-mapfunc%3F%2C-thisarg%3F)&#34;&gt;Array.from() – 2ality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from&#34;&gt;Array.from() – MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys&#34;&gt;Array.prototype.keys() – MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Custom CSS for Hugo sites</title>
      <link>https://notes.jsstrn.me/notes/hugo-custom-css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/hugo-custom-css/</guid>
      <description>&lt;p&gt;Create a &lt;code&gt;custom.css&lt;/code&gt; file to override the existing CSS rules in your current theme. You can name your CSS file whatever you like and have as many custom CSS files as you like.&lt;/p&gt;
&lt;p&gt;Update your &lt;code&gt;config.toml&lt;/code&gt; file as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;]
  &lt;span style=&#34;color:#a6e22e&#34;&gt;customCss&lt;/span&gt; = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;css/custom.css&amp;#34;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Daily dad jokes on Telegram</title>
      <link>https://notes.jsstrn.me/notes/project-daily-dad-jokes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/project-daily-dad-jokes/</guid>
      <description>&lt;p&gt;I created a Telegram channel to deliver dad jokes every day. I did not want to build a Node.js server and host it on Digital Ocean or Linode because that would be cost inefficient. Instead, I wanted to build an event-driven serverless architecture. We can achieve this with &lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;AWS Lambda&lt;/a&gt; for the lambda functions and &lt;a href=&#34;https://aws.amazon.com/cloudwatch/&#34;&gt;AWS CloudWatch&lt;/a&gt; to trigger the lambda through scheduled events.&lt;/p&gt;
&lt;p&gt;I first built a Telegram bot and then added it to the Telegram channel. The bot fetches a dad joke from &lt;a href=&#34;https://icanhazdadjoke.com/api&#34;&gt;icanhazdadjoke.com&lt;/a&gt; and publishes it to the channel. The last step was to schedule a daily trigger to run the lambda function on a regular schedule.&lt;/p&gt;
&lt;p&gt;You can view the &lt;a href=&#34;https://t.me/s/DailyDadJokes&#34;&gt;Daily Dad Jokes&lt;/a&gt; public channel. If you have a Telegram account you can also subscribe to the &lt;a href=&#34;https://t.me/DailyDadJokes&#34;&gt;channel&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dig – DNS lookup utility</title>
      <link>https://notes.jsstrn.me/notes/dig-dns-lookup-domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/dig-dns-lookup-domain/</guid>
      <description>&lt;p&gt;Dig is a DNS lookup utility. It&amp;rsquo;s useful when checking if you have setup the DNS configurations correctly for the domain names that you own.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;dig &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For example, you can check that this URL actually points to GitHub.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dig notes.jsstrn.me
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Exit a Bash script on error</title>
      <link>https://notes.jsstrn.me/notes/bash-exit-on-error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/bash-exit-on-error/</guid>
      <description>&lt;p&gt;If we want a Bash script to stop executing the rest of the script when one of the commands fail, we can simply add &lt;code&gt;set -e&lt;/code&gt; to the top of our script.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;set -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Favicon</title>
      <link>https://notes.jsstrn.me/notes/favicon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/favicon/</guid>
      <description>&lt;p&gt;I like creating my own favicon with &lt;a href=&#34;https://twitter.com/johnsorrentino&#34;&gt;John Sorrentino&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://favicon.io/&#34;&gt;Favicon.io&lt;/a&gt;. The tool allows you to convert existing images into &lt;code&gt;.ico&lt;/code&gt; file format or create a simple favicon from text or emoji.&lt;/p&gt;
&lt;p&gt;Another useful resource is &lt;a href=&#34;https://www.iconarchive.com/&#34;&gt;Icon Archive&lt;/a&gt;. They offer beautifully designed icons that can be downloaded in various formats including, &lt;code&gt;.ico&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with Pi-hole</title>
      <link>https://notes.jsstrn.me/notes/raspi-pi-hole/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/raspi-pi-hole/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pi-hole.net/&#34;&gt;Pi-hole&lt;/a&gt; is a domain name server that serves as a network-wide ad blocker.&lt;/p&gt;
&lt;p&gt;The main idea is to run Pi-hole on a Raspberry Pi and point our router to use it as its DNS. All traffic is then directed through Pi-hole where we can manage white and black lists.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install Ruby on macOS</title>
      <link>https://notes.jsstrn.me/notes/ruby-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/ruby-install/</guid>
      <description>&lt;p&gt;macOS comes with its own version of Ruby which will not allow you to install Gems. To start developing in Ruby, we first have to install our own version of Ruby.&lt;/p&gt;
&lt;p&gt;It is generally recommended to use a version manager for Ruby, like &lt;code&gt;rbenv&lt;/code&gt; to manage different versions of Ruby in various projects.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install rbenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add this line to your &lt;code&gt;.zshrc&lt;/code&gt;. This will setup &lt;code&gt;rbenv&lt;/code&gt; including adding &lt;code&gt;rbenv&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;rbenv init -&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See list of stable Ruby versions to install&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rbenv install -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install the version of Ruby that you want&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rbenv install &amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;State which version of Ruby you want to use as the global version&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rbenv global &amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Is it null or undefined?</title>
      <link>https://notes.jsstrn.me/notes/js-check-null-undefined/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/js-check-null-undefined/</guid>
      <description>&lt;p&gt;We can use strict equality to check if a variable is null or undefined in JavaScript.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// value is either null or undefined
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What I also found interesting is that although the regular equality in JavaScript is generally frowned upon, these two conditions are exactly identical. Of course, in general I would still prefer to use the code above as it is explicit in its intent.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// value is either null or undefined
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, have a look at the &lt;a href=&#34;https://dorey.github.io/JavaScript-Equality-Table/&#34;&gt;equality table&lt;/a&gt; in JavaScript.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript equality table</title>
      <link>https://notes.jsstrn.me/notes/js-equality-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/js-equality-table/</guid>
      <description>&lt;p&gt;Use strict equality always and here&amp;rsquo;s a good illustration why – JavaScript&amp;rsquo;s &lt;a href=&#34;https://dorey.github.io/JavaScript-Equality-Table/&#34;&gt;equality table&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Merging arrays in JavaScript</title>
      <link>https://notes.jsstrn.me/notes/js-merge-arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/js-merge-arrays/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s say we have these two arrays that we would like to merge together.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cherry&amp;#39;&lt;/span&gt;,
]

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cherry&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;durian&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elderberry&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fig&amp;#39;&lt;/span&gt;,
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One approach is to use &lt;code&gt;.concat&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another approach is to use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&#34;&gt;destructuring&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [...&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, ...&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This results in an array with two entries for &amp;lsquo;cherry&amp;rsquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;[
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cherry&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cherry&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;durian&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elderberry&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fig&amp;#39;&lt;/span&gt;,
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;⚠️ One important thing to keep in mind when merging two arrays in JavaScript is that there is no straightforward way to do so without duplicates. I have literally seen production code making this sort of mistake.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reboot your Raspberry Pi</title>
      <link>https://notes.jsstrn.me/notes/raspi-restart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/raspi-restart/</guid>
      <description>&lt;p&gt;To reboot your Raspberry Pi, simply run the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo shutdown -r now
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or even simpler&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Revert changes in Git</title>
      <link>https://notes.jsstrn.me/notes/git-reset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/git-reset/</guid>
      <description>&lt;p&gt;Move commits in C to staged&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;A - B - C &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
git reset --soft B
A - B &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
C is in staged
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Moved commits in C to unstaged&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;A - B - C &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
git reset B // same as doing git reset --mixed
A - B &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
C is in unstaged
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remove commits in C along with any other unstaged changes. Exercise caution when doing this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;A - B - C &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
git reset --hard B
A - B &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
C has been discarded
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Run tests that match a describe block</title>
      <link>https://notes.jsstrn.me/notes/jest-match-name-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/jest-match-name-tests/</guid>
      <description>&lt;p&gt;Very often I come across a situation where I&amp;rsquo;d like to only run a certain subset of tests in a describe block, usually when I&amp;rsquo;m trying to debug some code.&lt;/p&gt;
&lt;p&gt;If the describe block you want to run contains the word &amp;ldquo;Fizz Buzz&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;describe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Fizz Buzz&amp;#39;&lt;/span&gt;, () =&amp;gt; {})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can run all describe blocks that match a regex pattern&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jest --testNamePattern &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Fizz Buzz&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or simply use the alias &lt;code&gt;-t&lt;/code&gt; instead&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jest -t &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Fizz Buzz&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jestjs.io/docs/en/cli.html#&#34;&gt;Jest CLI documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Schedule a Cron job on Raspberry Pi</title>
      <link>https://notes.jsstrn.me/notes/raspi-schedule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/raspi-schedule/</guid>
      <description>&lt;p&gt;It is often recommended to install updates before installing other packages, we can create a Cron job that will run these commands on a daily basis.&lt;/p&gt;
&lt;p&gt;List existing Cron jobs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;crontab -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a new Cron job&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now add this line to the &lt;code&gt;crontab&lt;/code&gt; which will run daily at midnight&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; * * * sudo apt update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt --yes upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/linux/usage/cron.md&#34;&gt;Scheduling tasks with Cron&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH into a Raspberry Pi</title>
      <link>https://notes.jsstrn.me/notes/raspi-ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/raspi-ssh/</guid>
      <description>&lt;p&gt;First, we have to assign a static IP address to the Raspberry on your home router. Most home routers will allow you to do this.&lt;/p&gt;
&lt;p&gt;Now you can access the Raspberry Pi remotely via SSH &lt;code&gt;ssh &amp;lt;username&amp;gt;@&amp;lt;ip-address&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh pi@192.168.1.100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The default username is &lt;code&gt;pi&lt;/code&gt; and the default password is &lt;code&gt;raspberry&lt;/code&gt;. For security reasons, you should change your password.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The whole shebang</title>
      <link>https://notes.jsstrn.me/notes/shebang-origin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/shebang-origin/</guid>
      <description>&lt;p&gt;This two character sequence &lt;code&gt;#!&lt;/code&gt; is called shebang. It is used in shell scripts to determine which interpreter should be used to run the script.&lt;/p&gt;
&lt;p&gt;According to &lt;a href=&#34;https://en.wikipedia.org/wiki/Shebang_%28Unix%29#Etymology&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The name shebang for the distinctive two characters may have come from an inexact contraction of SHArp bang or haSH bang, referring to the two typical Unix names for them. Another theory on the sh in shebang is that it is from the default shell sh, usually invoked with shebang.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I personally like to remember &lt;code&gt;#!&lt;/code&gt; as hash bang.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Update your Raspberry Pi</title>
      <link>https://notes.jsstrn.me/notes/raspi-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/raspi-update/</guid>
      <description>&lt;h2 id=&#34;update-your-raspberry-pi&#34;&gt;Update your Raspberry Pi&lt;/h2&gt;
&lt;p&gt;Update the list of packages&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then upgrade the packages&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will ask if you want to upgrade packages.&lt;/p&gt;
&lt;p&gt;If you want to upgrade without being prompted, you can add the &lt;code&gt;--yes&lt;/code&gt; flag to the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt --yes upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Useful Vim commands</title>
      <link>https://notes.jsstrn.me/notes/vim-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/vim-commands/</guid>
      <description>&lt;h2 id=&#34;settings&#34;&gt;Settings&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:set number&lt;/code&gt; – show line numbers&lt;/p&gt;
&lt;h2 id=&#34;modes&#34;&gt;Modes&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Esc&lt;/code&gt; – command mode (default mode)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i&lt;/code&gt; – insert mode (before cursor)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a&lt;/code&gt; – insert mode (after cursor)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v&lt;/code&gt; – visual mode to select text to &lt;code&gt;y&lt;/code&gt; (yank) or &lt;code&gt;d&lt;/code&gt; (delete) text&lt;/p&gt;
&lt;h2 id=&#34;quiting-vim&#34;&gt;Quiting Vim&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:q&lt;/code&gt; – quit&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:q!&lt;/code&gt; – quit without saving&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:wq&lt;/code&gt; – save and quit&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:ZZ&lt;/code&gt; – save and quit&lt;/p&gt;
&lt;h2 id=&#34;undo-and-redo&#34;&gt;Undo and redo&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;u&lt;/code&gt; – undo the previous command&lt;/p&gt;
&lt;p&gt;&lt;code&gt;U&lt;/code&gt; – undo the whole line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ctrl + R&lt;/code&gt; – redo the previous command&lt;/p&gt;
&lt;h2 id=&#34;copy-and-paste&#34;&gt;Copy and paste&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;yw&lt;/code&gt; – yank (copy) a word&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yy&lt;/code&gt; – yank (copy) the entire line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;y$&lt;/code&gt; – yank from cursor position to end of line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yG&lt;/code&gt; – yank from cursor position to end of file&lt;/p&gt;
&lt;p&gt;&lt;code&gt;p&lt;/code&gt; – to put or paste the text that was copied or deleted&lt;/p&gt;
&lt;h2 id=&#34;delete&#34;&gt;Delete&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; – delete a character&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dw&lt;/code&gt; – delete word&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dd&lt;/code&gt; – delete line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;d$&lt;/code&gt; – delete from cursor to end of line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cw&lt;/code&gt; – change word; this will delete the word and put you in &lt;code&gt;insert&lt;/code&gt; mode&lt;/p&gt;
&lt;h2 id=&#34;navigation&#34;&gt;Navigation&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;h&lt;/code&gt; – move left&lt;/p&gt;
&lt;p&gt;&lt;code&gt;l&lt;/code&gt; – move right&lt;/p&gt;
&lt;p&gt;&lt;code&gt;j&lt;/code&gt; – move down&lt;/p&gt;
&lt;p&gt;&lt;code&gt;k&lt;/code&gt; – move down&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0&lt;/code&gt; – move to start of line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$&lt;/code&gt; – move to end of line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nG&lt;/code&gt; – move to line number where &lt;code&gt;n&lt;/code&gt; is the line number (e.g. &lt;code&gt;54G&lt;/code&gt; goes to line 54)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[[&lt;/code&gt; – move to start of file&lt;/p&gt;
&lt;p&gt;&lt;code&gt;]]&lt;/code&gt; – move to end of file&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>View changes before committing</title>
      <link>https://notes.jsstrn.me/notes/git-commit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/git-commit/</guid>
      <description>&lt;p&gt;Avoid blindly staging code with &lt;code&gt;git add --all&lt;/code&gt; or &lt;code&gt;git add .&lt;/code&gt; as you may accidentally stage and commit code that you didn&amp;rsquo;t intend to.&lt;/p&gt;
&lt;p&gt;I prefer to use &lt;code&gt;--patch&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt; when adding code to staging. This allows you to go through your changes and review them by hunks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add -p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since new files are not tracked they will not show up in &lt;code&gt;--patch&lt;/code&gt; so you have to use &lt;code&gt;--intent-to-add&lt;/code&gt; or &lt;code&gt;-N&lt;/code&gt; to track those files before you can use &lt;code&gt;--patch&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add -N &amp;lt;new-filename&amp;gt;
git add -p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will see changes marked with &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; to indicate if code has been added or deleted. You&amp;rsquo;ll be prompted as such.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1/1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Stage this hunk &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;y,n,q,a,d,e,?&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Typically, you reply with &lt;code&gt;y&lt;/code&gt; to stage the hunk or &lt;code&gt;n&lt;/code&gt; to ignore it. Sometimes we want to stage the entire file without looking at the remaining hunks in the file, we can do this with &lt;code&gt;a&lt;/code&gt;. This is useful for files like &lt;code&gt;package-lock.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can manually edit &lt;code&gt;e&lt;/code&gt; which lines to add or remove in each hunk. When in edit mode you will make your changes in &lt;code&gt;vim&lt;/code&gt;. To remove &lt;code&gt;&#39;+&#39;&lt;/code&gt; lines just delete them. To remove &lt;code&gt;&#39;-&#39;&lt;/code&gt; lines, just change them to &lt;code&gt;&#39; &#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;?&lt;/code&gt; to display this help screen if you ever forget what the commands stand for.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;y - stage this hunk
n - &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not stage this hunk
q - quit; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not stage this hunk or any of the remaining ones
a - stage this hunk and all later hunks in the file
d - &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not stage this hunk or any of the later hunks in the file
e - manually edit the current hunk
? - print help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you have reviewed all your changes. You can commit your changes as usual.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Some meaningful commit message&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>View code changes</title>
      <link>https://notes.jsstrn.me/notes/git-diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/git-diff/</guid>
      <description>&lt;p&gt;One way to review code changes that are unstaged is to use the following command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git diff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that untracked files will not be shown. You have to add untracked files before they will show up.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add -N &amp;lt;untracked-file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also see a summary of what has changed with &lt;code&gt;--stat&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git diff --stat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command is useful to check for trailing white space and merge conflict markers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git diff --check
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can use this command if you&amp;rsquo;ve already staged your changes. This is useful before you make a commit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git diff --staged
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Watch for file changes as you run your tests</title>
      <link>https://notes.jsstrn.me/notes/jest-run-tests-watch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/jest-run-tests-watch/</guid>
      <description>&lt;p&gt;To watch for file changes and &lt;strong&gt;only&lt;/strong&gt; run tests related to changed files. This requires that your project is a Git repository.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jest --watch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To watch for file changes and run &lt;strong&gt;all&lt;/strong&gt; tests. This does not require that your project be a Git repository.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jest --watchAll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We often add this to our npm scripts&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jest&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;test:watch&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jest --watch&amp;#34;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jestjs.io/docs/en/cli.html#&#34;&gt;Jest CLI documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Which shebang to use to run Bash scripts?</title>
      <link>https://notes.jsstrn.me/notes/bash-shebang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://notes.jsstrn.me/notes/bash-shebang/</guid>
      <description>&lt;p&gt;This two character sequence &lt;code&gt;#!&lt;/code&gt; is called shebang. It is used in shell scripts to determine which interpreter should be used to run the script.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a good idea to include a shebang &lt;code&gt;#!&lt;/code&gt; at the top of a Bash file. This is so that the sript runs correctly regardless of what shell the user is running. For example, if a user is using the zsh shell, the script would default to zsh syntax instead of the intended bash syntax. Adding a shebang prevents this issue.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Reference: &lt;a href=&#34;https://stackoverflow.com/questions/10376206/what-is-the-preferred-bash-shebang&#34;&gt;What is the preferred bash shebang&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>